// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/event/event.proto

package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Topic int32

const (
	Event_ContractReceipt    Event_Topic = 0
	Event_ContractEvent      Event_Topic = 1
	Event_TransactionResult  Event_Topic = 2
	Event_TransactionConfirm Event_Topic = 3
	Event_TransactionPending Event_Topic = 4
	Event_NewBlock           Event_Topic = 5
	Event_ProducerState      Event_Topic = 6
)

var Event_Topic_name = map[int32]string{
	0: "ContractReceipt",
	1: "ContractEvent",
	2: "TransactionResult",
	3: "TransactionConfirm",
	4: "TransactionPending",
	5: "NewBlock",
	6: "ProducerState",
}
var Event_Topic_value = map[string]int32{
	"ContractReceipt":    0,
	"ContractEvent":      1,
	"TransactionResult":  2,
	"TransactionConfirm": 3,
	"TransactionPending": 4,
	"NewBlock":           5,
	"ProducerState":      6,
}

func (x Event_Topic) String() string {
	return proto.EnumName(Event_Topic_name, int32(x))
}
func (Event_Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_event_6a0b43ee813ad34f, []int{0, 0}
}

type Event struct {
	Topic                Event_Topic `protobuf:"varint,1,opt,name=topic,proto3,enum=event.Event_Topic" json:"topic,omitempty"`
	Data                 string      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Time                 int64       `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_6a0b43ee813ad34f, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTopic() Event_Topic {
	if m != nil {
		return m.Topic
	}
	return Event_ContractReceipt
}

func (m *Event) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Event) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterEnum("event.Event_Topic", Event_Topic_name, Event_Topic_value)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Topic))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovEvent(uint64(m.Topic))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovEvent(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= (Event_Topic(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("core/event/event.proto", fileDescriptor_event_6a0b43ee813ad34f) }

var fileDescriptor_event_6a0b43ee813ad34f = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xdf, 0x4a, 0xf3, 0x40,
	0x10, 0xc5, 0x3b, 0x4d, 0x53, 0xbe, 0x6f, 0xf0, 0xcf, 0x76, 0xc4, 0x92, 0xab, 0x10, 0x7a, 0x95,
	0xab, 0x08, 0xfa, 0x06, 0x2d, 0xde, 0x4a, 0x89, 0x7d, 0x81, 0x75, 0x33, 0xca, 0x62, 0xbb, 0x1b,
	0xb6, 0x53, 0x7d, 0x14, 0x7d, 0x24, 0x2f, 0x7d, 0x04, 0x89, 0x8f, 0xe0, 0x0b, 0x48, 0x36, 0x08,
	0xe2, 0xcd, 0x70, 0xe6, 0x77, 0xce, 0x70, 0x60, 0x70, 0x6e, 0x7c, 0xe0, 0x0b, 0x7e, 0x62, 0x27,
	0xc3, 0xac, 0xda, 0xe0, 0xc5, 0x53, 0x1a, 0x97, 0xc5, 0x17, 0x60, 0x7a, 0xdd, 0x2b, 0x2a, 0x31,
	0x15, 0xdf, 0x5a, 0x93, 0x41, 0x01, 0xe5, 0xc9, 0x25, 0x55, 0x43, 0x3a, 0x9a, 0xd5, 0xa6, 0x77,
	0xea, 0x21, 0x40, 0x84, 0x93, 0x46, 0x8b, 0xce, 0xc6, 0x05, 0x94, 0xff, 0xeb, 0xa8, 0x7b, 0x26,
	0x76, 0xc7, 0x59, 0x52, 0x40, 0x99, 0xd4, 0x51, 0x2f, 0x5e, 0x00, 0xd3, 0x78, 0x48, 0x67, 0x78,
	0xba, 0xf2, 0x4e, 0x82, 0x36, 0x52, 0xb3, 0x61, 0xdb, 0x8a, 0x1a, 0xd1, 0x0c, 0x8f, 0x7f, 0x60,
	0x2c, 0x51, 0x40, 0xe7, 0x38, 0xdb, 0x04, 0xed, 0xf6, 0xda, 0x88, 0xf5, 0xae, 0xe6, 0xfd, 0x61,
	0x2b, 0x6a, 0x4c, 0x73, 0xa4, 0x5f, 0x78, 0xe5, 0xdd, 0xbd, 0x0d, 0x3b, 0x95, 0xfc, 0xe1, 0x6b,
	0x76, 0x8d, 0x75, 0x0f, 0x6a, 0x42, 0x47, 0xf8, 0xef, 0x86, 0x9f, 0x97, 0x5b, 0x6f, 0x1e, 0x55,
	0xda, 0xf7, 0xac, 0x83, 0x6f, 0x0e, 0x86, 0xc3, 0xad, 0x68, 0x61, 0x35, 0x5d, 0xaa, 0xb7, 0x2e,
	0x87, 0xf7, 0x2e, 0x87, 0x8f, 0x2e, 0x87, 0xd7, 0xcf, 0x7c, 0x74, 0x37, 0x8d, 0x5f, 0xb9, 0xfa,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x26, 0x89, 0xc5, 0x86, 0x2f, 0x01, 0x00, 0x00,
}
