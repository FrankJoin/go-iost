// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/block/pb/block.proto

package blockpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pb1 "github.com/iost-official/go-iost/core/tx/pb"
import pb "github.com/iost-official/go-iost/crypto/pb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockType int32

const (
	BlockType_NORMAL   BlockType = 0
	BlockType_ONLYHASH BlockType = 1
)

var BlockType_name = map[int32]string{
	0: "NORMAL",
	1: "ONLYHASH",
}
var BlockType_value = map[string]int32{
	"NORMAL":   0,
	"ONLYHASH": 1,
}

func (x BlockType) String() string {
	return proto.EnumName(BlockType_name, int32(x))
}
func (BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_block_213112f82392ffb8, []int{0}
}

type BlockHead struct {
	Version              int64    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ParentHash           []byte   `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxMerkleHash         []byte   `protobuf:"bytes,3,opt,name=txMerkleHash,proto3" json:"txMerkleHash,omitempty"`
	TxReceiptMerkleHash  []byte   `protobuf:"bytes,4,opt,name=txReceiptMerkleHash,proto3" json:"txReceiptMerkleHash,omitempty"`
	Info                 []byte   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Number               int64    `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	Witness              string   `protobuf:"bytes,7,opt,name=witness,proto3" json:"witness,omitempty"`
	Time                 int64    `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHead) Reset()         { *m = BlockHead{} }
func (m *BlockHead) String() string { return proto.CompactTextString(m) }
func (*BlockHead) ProtoMessage()    {}
func (*BlockHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_213112f82392ffb8, []int{0}
}
func (m *BlockHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHead.Merge(dst, src)
}
func (m *BlockHead) XXX_Size() int {
	return m.Size()
}
func (m *BlockHead) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHead.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHead proto.InternalMessageInfo

func (m *BlockHead) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHead) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHead) GetTxMerkleHash() []byte {
	if m != nil {
		return m.TxMerkleHash
	}
	return nil
}

func (m *BlockHead) GetTxReceiptMerkleHash() []byte {
	if m != nil {
		return m.TxReceiptMerkleHash
	}
	return nil
}

func (m *BlockHead) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *BlockHead) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockHead) GetWitness() string {
	if m != nil {
		return m.Witness
	}
	return ""
}

func (m *BlockHead) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Block struct {
	Head                 *BlockHead       `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Sign                 *pb.Signature    `protobuf:"bytes,2,opt,name=sign" json:"sign,omitempty"`
	Txs                  []*pb1.Tx        `protobuf:"bytes,3,rep,name=txs" json:"txs,omitempty"`
	Receipts             []*pb1.TxReceipt `protobuf:"bytes,4,rep,name=receipts" json:"receipts,omitempty"`
	TxHashes             [][]byte         `protobuf:"bytes,5,rep,name=txHashes" json:"txHashes,omitempty"`
	ReceiptHashes        [][]byte         `protobuf:"bytes,6,rep,name=receiptHashes" json:"receiptHashes,omitempty"`
	BlockType            BlockType        `protobuf:"varint,7,opt,name=blockType,proto3,enum=blockpb.BlockType" json:"blockType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_213112f82392ffb8, []int{1}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(dst, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHead() *BlockHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Block) GetSign() *pb.Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Block) GetTxs() []*pb1.Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Block) GetReceipts() []*pb1.TxReceipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *Block) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *Block) GetReceiptHashes() [][]byte {
	if m != nil {
		return m.ReceiptHashes
	}
	return nil
}

func (m *Block) GetBlockType() BlockType {
	if m != nil {
		return m.BlockType
	}
	return BlockType_NORMAL
}

func init() {
	proto.RegisterType((*BlockHead)(nil), "blockpb.BlockHead")
	proto.RegisterType((*Block)(nil), "blockpb.Block")
	proto.RegisterEnum("blockpb.BlockType", BlockType_name, BlockType_value)
}
func (m *BlockHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if len(m.ParentHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ParentHash)))
		i += copy(dAtA[i:], m.ParentHash)
	}
	if len(m.TxMerkleHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxMerkleHash)))
		i += copy(dAtA[i:], m.TxMerkleHash)
	}
	if len(m.TxReceiptMerkleHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxReceiptMerkleHash)))
		i += copy(dAtA[i:], m.TxReceiptMerkleHash)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	if m.Number != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Number))
	}
	if len(m.Witness) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Witness)))
		i += copy(dAtA[i:], m.Witness)
	}
	if m.Time != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Head.Size()))
		n1, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Sign != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Sign.Size()))
		n2, err := m.Sign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Receipts) > 0 {
		for _, msg := range m.Receipts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TxHashes) > 0 {
		for _, b := range m.TxHashes {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ReceiptHashes) > 0 {
		for _, b := range m.ReceiptHashes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.BlockType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.BlockType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TxMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TxReceiptMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovBlock(uint64(m.Number))
	}
	l = len(m.Witness)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBlock(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Sign != nil {
		l = m.Sign.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.TxHashes) > 0 {
		for _, b := range m.TxHashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.ReceiptHashes) > 0 {
		for _, b := range m.ReceiptHashes {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.BlockType != 0 {
		n += 1 + sovBlock(uint64(m.BlockType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxMerkleHash = append(m.TxMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxMerkleHash == nil {
				m.TxMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxReceiptMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxReceiptMerkleHash = append(m.TxReceiptMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxReceiptMerkleHash == nil {
				m.TxReceiptMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info[:0], dAtA[iNdEx:postIndex]...)
			if m.Info == nil {
				m.Info = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &BlockHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sign == nil {
				m.Sign = &pb.Signature{}
			}
			if err := m.Sign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &pb1.Tx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &pb1.TxReceipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashes = append(m.TxHashes, make([]byte, postIndex-iNdEx))
			copy(m.TxHashes[len(m.TxHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptHashes = append(m.ReceiptHashes, make([]byte, postIndex-iNdEx))
			copy(m.ReceiptHashes[len(m.ReceiptHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockType", wireType)
			}
			m.BlockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockType |= (BlockType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("core/block/pb/block.proto", fileDescriptor_block_213112f82392ffb8) }

var fileDescriptor_block_213112f82392ffb8 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0x3a, 0x71, 0x9c, 0x49, 0x80, 0x68, 0x90, 0xd0, 0x92, 0x83, 0x65, 0x45, 0x05,
	0x59, 0xa0, 0xda, 0x55, 0xe0, 0xc4, 0xad, 0x3d, 0xe5, 0xd0, 0x3f, 0xd2, 0xb6, 0x17, 0x8e, 0xb6,
	0xbb, 0x49, 0x56, 0x4d, 0xbc, 0x96, 0x77, 0x03, 0xee, 0x6b, 0x70, 0xe2, 0x91, 0x38, 0xf2, 0x08,
	0x28, 0x3c, 0x03, 0x77, 0xb4, 0x63, 0x27, 0xb4, 0x08, 0x89, 0xdb, 0x7e, 0xdf, 0xfc, 0x76, 0x3c,
	0xdf, 0x78, 0xe1, 0x65, 0xae, 0x2a, 0x91, 0x64, 0x2b, 0x95, 0xdf, 0x25, 0x65, 0xd6, 0x1c, 0xe2,
	0xb2, 0x52, 0x46, 0x61, 0x8f, 0x44, 0x99, 0x8d, 0x3f, 0x2c, 0xa4, 0x59, 0x6e, 0xb2, 0x38, 0x57,
	0xeb, 0x44, 0x2a, 0x6d, 0x8e, 0xd5, 0x7c, 0x2e, 0x73, 0x99, 0xae, 0x92, 0x85, 0x3a, 0xb6, 0x46,
	0x92, 0x57, 0xf7, 0xa5, 0x51, 0xb6, 0x81, 0x96, 0x8b, 0x22, 0x35, 0x9b, 0x4a, 0x34, 0x4d, 0xc6,
	0xef, 0xff, 0x7f, 0xd7, 0x0e, 0x60, 0x6a, 0x7b, 0xd9, 0xd4, 0xcd, 0xad, 0xc9, 0x2f, 0x07, 0xfa,
	0x67, 0xf6, 0xeb, 0x33, 0x91, 0xde, 0x22, 0x83, 0xde, 0x27, 0x51, 0x69, 0xa9, 0x0a, 0xe6, 0x84,
	0x4e, 0xe4, 0xf2, 0x9d, 0xc4, 0x00, 0xa0, 0x4c, 0x2b, 0x51, 0x98, 0x59, 0xaa, 0x97, 0xec, 0x30,
	0x74, 0xa2, 0x21, 0x7f, 0xe0, 0xe0, 0x04, 0x86, 0xa6, 0xbe, 0x10, 0xd5, 0xdd, 0x4a, 0x10, 0xe1,
	0x12, 0xf1, 0xc8, 0xc3, 0x13, 0x78, 0x6e, 0x6a, 0x2e, 0x72, 0x21, 0x4b, 0xf3, 0x00, 0xed, 0x10,
	0xfa, 0xaf, 0x12, 0x22, 0x74, 0x64, 0x31, 0x57, 0xac, 0x4b, 0x08, 0x9d, 0xf1, 0x05, 0x78, 0xc5,
	0x66, 0x9d, 0x89, 0x8a, 0x79, 0x34, 0x62, 0xab, 0xec, 0xec, 0x9f, 0xa5, 0x29, 0x84, 0xd6, 0xac,
	0x17, 0x3a, 0x51, 0x9f, 0xef, 0xa4, 0xed, 0x62, 0xe4, 0x5a, 0x30, 0x9f, 0x78, 0x3a, 0x4f, 0xbe,
	0x1c, 0x42, 0x97, 0x72, 0xe3, 0x6b, 0xe8, 0x2c, 0x45, 0x7a, 0x4b, 0x81, 0x07, 0x53, 0x8c, 0xdb,
	0x7f, 0x11, 0xef, 0xb7, 0xc2, 0xa9, 0x8e, 0x47, 0xd0, 0xb1, 0x2b, 0xa7, 0xec, 0x83, 0xe9, 0x28,
	0xd6, 0x72, 0x51, 0x66, 0xf1, 0xf5, 0xee, 0x2f, 0x70, 0xaa, 0xe2, 0x18, 0x5c, 0x53, 0x6b, 0xe6,
	0x86, 0x6e, 0x34, 0x98, 0xfa, 0xb1, 0xa9, 0xcb, 0x2c, 0xbe, 0xa9, 0xb9, 0x35, 0xf1, 0x2d, 0xf8,
	0x55, 0x13, 0x51, 0xb3, 0x0e, 0x01, 0xcf, 0xf6, 0x40, 0xe3, 0xf3, 0x3d, 0x80, 0x63, 0xf0, 0x4d,
	0x6d, 0x97, 0x20, 0x34, 0xeb, 0x86, 0x6e, 0x34, 0xe4, 0x7b, 0x8d, 0x47, 0xf0, 0xa4, 0xe5, 0x5a,
	0xc0, 0x23, 0xe0, 0xb1, 0x89, 0x27, 0xd0, 0xa7, 0x2c, 0x37, 0xf7, 0xa5, 0xa0, 0x95, 0x3c, 0xfd,
	0x3b, 0x9d, 0xad, 0xf0, 0x3f, 0xd0, 0x9b, 0x57, 0xed, 0x5b, 0xb0, 0x02, 0x01, 0xbc, 0xcb, 0x2b,
	0x7e, 0x71, 0x7a, 0x3e, 0x3a, 0xc0, 0x21, 0xf8, 0x57, 0x97, 0xe7, 0x1f, 0x67, 0xa7, 0xd7, 0xb3,
	0x91, 0x73, 0x36, 0xfa, 0xb6, 0x0d, 0x9c, 0xef, 0xdb, 0xc0, 0xf9, 0xb1, 0x0d, 0x9c, 0xaf, 0x3f,
	0x83, 0x83, 0xcc, 0xa3, 0xc7, 0xf4, 0xee, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x4a, 0x66,
	0xd1, 0xe4, 0x02, 0x00, 0x00,
}
